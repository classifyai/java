/*
 * Classify
 * Classify Custom Image Recognition Service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@inoven.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.InlineObject;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create New Model
     *
     * Create a new custom image recognition model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewModelTest() throws ApiException {
        String modelName = null;
        api.createNewModel(modelName);

        // TODO: test validations
    }
    
    /**
     * Delete Model
     *
     * Delete Model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String modelId = null;
        api.deleteModel(modelId);

        // TODO: test validations
    }
    
    /**
     * Get Models List
     *
     * Get the list of of models created 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getModelsListTest() throws ApiException {
        String response = api.getModelsList();

        // TODO: test validations
    }
    
    /**
     * Index by Using Image URL
     *
     * Index by Using Image URL
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexByImageUrlTest() throws ApiException {
        InlineObject inlineObject = null;
        api.indexByImageUrl(inlineObject);

        // TODO: test validations
    }
    
    /**
     * Index Local Image
     *
     * Index Local Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexImageTest() throws ApiException {
        String modelId = null;
        String tag = null;
        File file = null;
        String response = api.indexImage(modelId, tag, file);

        // TODO: test validations
    }
    
    /**
     * Tag Image by Using Image Url
     *
     * Predict image tags by providing image url
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagImageByUrlTest() throws ApiException {
        String modelId = null;
        String imageUrl = null;
        api.tagImageByUrl(modelId, imageUrl);

        // TODO: test validations
    }
    
    /**
     * Predict by Image
     *
     * Send a local image to tag
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tagLocalImageTest() throws ApiException {
        File file = null;
        String modelId = null;
        api.tagLocalImage(file, modelId);

        // TODO: test validations
    }
    
    /**
     * Update Model
     *
     * Update Model Name
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateModelTest() throws ApiException {
        String modelName = null;
        String modelId = null;
        api.updateModel(modelName, modelId);

        // TODO: test validations
    }
    
}
